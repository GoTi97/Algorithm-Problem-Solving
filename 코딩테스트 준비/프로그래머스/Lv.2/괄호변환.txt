'''
균형잡힌 괄호 문자열 : '(' 의 개수와 ')' 의 개수가 같다면
올바른 괄호 문자열 : '('와 ')'의 괄호의 짝도 모두 맞을 경우

올바른 < 균형잡힌

DP + 시뮬레이션 + 스택 문제

아

시

자

'''


def solution(p): #p는 균형잡힌 괄호 문자열임을 보장
    answer = ''
    
    def check_perfect(s):
        stack = []
        for s_i in s:
            if s_i == '(':
                stack.append(s_i)
            elif s_i == ')':
                try:
                    stack.pop()
                except:
                    return False
        if len(stack) != 0:
            return False
        return True
    
    def pop_left_balanced(s):
        left = s[0]
        cnt = 1
        for i in range(1,len(s)):
            if s[0] == s[i]:
                cnt += 1
                left += s[i]
            else:
                cnt -= 1
                left += s[i]
                if cnt == 0:
                    return left
        raise Exception("있을 수 없는 경우")
    
    #1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 
    if p == '':
        return answer
    else: 
        #2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 
        #단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 
        #즉, u는 앞에서부터 잘랐을때 가장 작은 단위의 균형잡힌 괄호 문자열을 의미함
        u = pop_left_balanced(p)
        if len(p) == len(u):
            v = ''
        else:
            v = p[len(u):]
        #3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
        #3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
        if check_perfect(u):
            
            answer = u + solution(v)
            
        #4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
        else:
            #4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
            new = '('
            #4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
            new += solution(v)
            #4-3. ')'를 다시 붙입니다. 
            new += ')'
            #4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다.
            new_u = u[1:-1]
            new_u = new_u.replace('(', '*')
            new_u = new_u.replace(')', '(')
            new_u = new_u.replace('*', ')')
            new += new_u
            #4-5. 생성된 문자열을 반환합니다.
            answer = new
    
    return answer