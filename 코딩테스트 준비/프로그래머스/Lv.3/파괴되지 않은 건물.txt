누적합문제
변화량 테이블을 생성후 결과값테이블에
적용하는 방식

2차원이 어려우면 1차원으로 먼저 생각후 
아이디어 디벨롭

모든 변화를 계속해서 업데이트 해준다기보다
업데이트해야될 것을 기억후
한꺼번에 업데이트




'''
아
완전탐색 -> 시간초과
sort?
결국에 각 인덱스 일일히 탐색이 중요한게 아니고
몇개 건물이 살아있는지만 알면됨
그러면 그냥 겹치는 부분이 얼마나 깊은지만 알면됨
1차원으로 생각하면
30분 고민 후 해설봤음

누적합 시작에 변화주고싶은 값 끝+1에 반대부호값


시
O(N*M*SKILL) = 1000*1000*250000= 250,000,000,000 << 2억

nlogn 2^18*20 = 5,000,000

O(K+M*N) = 250,000+1,000,000 = 1,250,000


자
새로운 누적합 배열: int[][]

암

'''


def solution(board, skill):
    answer = 0
    
    add_list = [[0 for _ in range(len(board[0])+1)] for _ in range(len(board)+1)]
    
    for typ,r1,c1,r2,c2,degree in skill:
        if typ == 1:
            degree = -degree
        add_list[r1][c1] += degree
        add_list[r2+1][c2+1] += degree
        add_list[r1][c2+1] -= degree
        add_list[r2+1][c1] -= degree  
    
    for j in range(len(add_list)):
        for i in range(1,len(add_list[0])):
            add_list[j][i] += add_list[j][i-1]
    
    for i in range(len(add_list[0])):
        for j in range(1,len(add_list)):
            add_list[j][i] += add_list[j-1][i]    
    
    for j in range(len(board)):
        for i in range(len(board[0])):
            board[j][i] += add_list[j][i]
            if board[j][i] > 0:
                answer += 1
    
    return answer
