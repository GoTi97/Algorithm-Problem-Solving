'''
아이디어

다익스트라
힙으로 구현
시작 지점부터 연결된노드 최소거리부터 탐색 시작
만약 방문 안했다면 추가 inf-> dist 업데이트
방문했다면 현재 dist 보다 작은지 큰지 확인후 작다면 업데이트

시간복잡도
O(ElogV)

자료구조

V,E : int
start : int
minimum_dist : int[] (V+1)
인접리스트 : int[[w,nd]] (V+1)
'''
import sys
import heapq
input = sys.stdin.readline
inf = sys.maxsize

V,E = map(int, input().split())
start = int(input())
next_node = [[] for _ in range(V+1)]
for i in range(E):
    u,v,w = map(int,input().split())
    next_node[u].append([w,v])
min_dist = [inf] * (V+1)

min_dist[start] = 0
heap = [[0,start]]

while heap:
    #print(heap)
    #print(min_dist)
    w, v = heapq.heappop(heap)
    for nn in next_node[v]:
        if min_dist[nn[1]] > min_dist[v] + nn[0]:
            min_dist[nn[1]] = min_dist[v] + nn[0]
            heapq.heappush(heap,[min_dist[nn[1]],nn[1]])

for i in range(1,len(min_dist)):
    if min_dist[i] == inf:
        print("INF")
    else:
        print(min_dist[i])
